{"version":3,"sources":["components/heading.js","components/form.js","components/forecast.js","App.js","index.js"],"names":["Heading","props","Form","onSubmit","loadWeather","type","name","placeholder","Forecast","className","country","city","temperature","humidity","pressure","icon","src","alt","description","error","api_key","App","state","getWeather","e","a","target","elements","value","preventDefault","fetch","api_call","json","response","setState","main","temp","sys","county","weather","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TAYeA,G,OAVC,SAACC,GACb,OACI,6BACI,wDACA,yFCOGC,EAVF,SAACD,GACV,OACI,0BAAME,SAAUF,EAAMG,aAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,kBAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,qBAC9C,iDCSGC,EAfE,SAACP,GACd,OACI,yBAAKQ,UAAU,WACZR,EAAMS,SAAWT,EAAMU,MAAQ,uCAC/BV,EAAMU,KADyB,KACjBV,EAAMS,SACpBT,EAAMW,aAAe,4CAAkBX,EAAMW,aAC7CX,EAAMY,UAAY,yCAAeZ,EAAMY,UACvCZ,EAAMa,UAAY,yCAAeb,EAAMa,UACvCb,EAAMc,MAAQ,yBAAKC,IAAG,0CAAqCf,EAAMc,KAA3C,QAAsDE,IAAI,iBAChFhB,EAAMiB,aAAe,0CAAgBjB,EAAMiB,aAC3CjB,EAAMkB,OAAS,2BAAIlB,EAAMkB,SCL9BC,G,OAAW,oCA+DFC,E,4MA3DbC,MAAQ,CACNV,YAAY,GACZD,KAAK,GACLD,QAAQ,GACRG,SAAS,GACTC,SAAU,GACVC,KAAK,GACLG,YAAY,GACZC,MAAM,I,EAGRI,W,uCAAa,WAAMC,GAAN,qBAAAC,EAAA,6DACLd,EAAOa,EAAEE,OAAOC,SAAShB,KAAKiB,MAC9BlB,EAAUc,EAAEE,OAAOC,SAASjB,QAAQkB,MAC1CJ,EAAEK,iBAHS,SAIYC,MAAM,qDAAD,OAAsDnB,EAAtD,YAA8DD,EAA9D,iCAA8FU,IAJ/G,cAILW,EAJK,gBAMYA,EAASC,OANrB,OAMLC,EANK,OAORtB,GAAQD,EACT,EAAKwB,SAAS,CACZtB,YAAaqB,EAASE,KAAKC,KAC3BzB,KAAMsB,EAAS3B,KACfI,QAASuB,EAASI,IAAIC,OACtBzB,SAAUoB,EAASE,KAAKtB,SACxBC,SAAUmB,EAASE,KAAKrB,SACxBC,KAAMkB,EAASM,QAAQ,GAAGxB,KAC1BG,YAAae,EAASM,QAAQ,GAAGrB,YACjCC,MAAO,KAGT,EAAKe,SAAS,CACZf,MAAO,oCApBA,4C,6GA0BX,OACE,yBAAKV,UAAU,aACf,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACf,kBAAC,EAAD,CAAML,YAAaoC,KAAKjB,cAExB,yBAAKd,UAAU,WACf,kBAAC,EAAD,CACAG,YAAa4B,KAAKlB,MAAMV,YACxBD,KAAM6B,KAAKlB,MAAMX,KACjBD,QAAS8B,KAAKlB,MAAMZ,QACpBG,SAAU2B,KAAKlB,MAAMT,SACrBC,SAAU0B,KAAKlB,MAAMR,SACrBC,KAAMyB,KAAKlB,MAAMP,KACjBG,YAAasB,KAAKlB,MAAMJ,YACxBC,MAAOqB,KAAKlB,MAAMH,c,GArDNsB,IAAMC,WCLxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.0a56b071.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Heading = (props) => {\r\n    return(\r\n        <div>\r\n            <h1>What's the Weather like?</h1>\r\n            <h3>Find out what the weather conditions are in your city.</h3>\r\n\r\n        </div>\r\n    )   \r\n}\r\n\r\nexport default Heading;","import React from 'react';\r\nimport Heading from './heading';\r\n\r\nconst Form = (props) => {\r\n    return(\r\n        <form onSubmit={props.loadWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"Choose a City\" />\r\n            <input type=\"text\" name=\"country\" placeholder=\"Choose a Country\" />\r\n            <button>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Forecast = (props) => {\r\n    return(\r\n        <div className=\"weather\">\r\n          {props.country && props.city && <p>Location: \r\n          {props.city}, {props.country}</p>}\r\n          {props.temperature && <p> Temperature: {props.temperature}</p>}\r\n          {props.humidity && <p> Humidity: {props.humidity}</p>}\r\n          {props.pressure && <p> Pressure: {props.pressure}</p>}\r\n          {props.icon && <img src={`http://openweathermap.org/img/w/${props.icon}.png`}alt=\"weather icon\"/>}\r\n          {props.description && <p>Conditions: {props.description}</p>}\r\n          {props.error && <p>{props.error}</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Forecast;","import React from 'react';\nimport './App.css';\nimport Heading from './components/heading';\nimport Form from './components/form';\nimport Forecast from './components/forecast'\nimport { render } from '@testing-library/react';\n\nconst api_key =  \"db4a9ee3c2449d9e13796e60a0c946bc\";\n\n\nclass App extends React.Component{\n  state = {\n    temperature:\"\",\n    city:\"\",\n    country:\"\",\n    humidity:\"\",\n    pressure: \"\",\n    icon:\"\",\n    description:\"\",\n    error:\"\"\n  }\n\n  getWeather = async(e) => {\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    e.preventDefault();\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=imperial&appid=${api_key}`);\n    \n    const response = await api_call.json(); \n    if(city && country){\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.county,\n        humidity: response.main.humidity,\n        pressure: response.main.pressure,\n        icon: response.weather[0].icon,\n        description: response.weather[0].description,\n        error: \"\"\n      })\n    }else{\n      this.setState({\n        error: \"Please fill out input fields...\"\n      })\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"container\">\n      <Heading/>\n      <div className=\"form\">\n      <Form loadWeather={this.getWeather} />\n      </div>\n      <div className=\"weather\">\n      <Forecast\n      temperature={this.state.temperature}\n      city={this.state.city}\n      country={this.state.country}\n      humidity={this.state.humidity}\n      pressure={this.state.pressure}\n      icon={this.state.icon}\n      description={this.state.description}\n      error={this.state.error}/>\n    </div>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}